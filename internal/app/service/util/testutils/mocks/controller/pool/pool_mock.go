// Code generated by MockGen. DO NOT EDIT.
// Source: uniswapper/internal/app/controller/pool (interfaces: IPoolController)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIPoolController is a mock of IPoolController interface.
type MockIPoolController struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolControllerMockRecorder
}

// MockIPoolControllerMockRecorder is the mock recorder for MockIPoolController.
type MockIPoolControllerMockRecorder struct {
	mock *MockIPoolController
}

// NewMockIPoolController creates a new mock instance.
func NewMockIPoolController(ctrl *gomock.Controller) *MockIPoolController {
	mock := &MockIPoolController{ctrl: ctrl}
	mock.recorder = &MockIPoolControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolController) EXPECT() *MockIPoolControllerMockRecorder {
	return m.recorder
}

// GetPoolLogsById mocks base method.
func (m *MockIPoolController) GetPoolLogsById(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPoolLogsById", arg0)
}

// GetPoolLogsById indicates an expected call of GetPoolLogsById.
func (mr *MockIPoolControllerMockRecorder) GetPoolLogsById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolLogsById", reflect.TypeOf((*MockIPoolController)(nil).GetPoolLogsById), arg0)
}

// GetPoolLogsHistory mocks base method.
func (m *MockIPoolController) GetPoolLogsHistory(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPoolLogsHistory", arg0)
}

// GetPoolLogsHistory indicates an expected call of GetPoolLogsHistory.
func (mr *MockIPoolControllerMockRecorder) GetPoolLogsHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolLogsHistory", reflect.TypeOf((*MockIPoolController)(nil).GetPoolLogsHistory), arg0)
}
